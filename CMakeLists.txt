PROJECT(openssl)

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/OpenSslFunctions.cmake)
INCLUDE(CheckCCompilerFlag)
INCLUDE(TestBigEndian)

TEST_BIG_ENDIAN(PLATFORM_IS_BIG_ENDIAN)

IF(PLATFORM_IS_BIG_ENDIAN)
    ADD_DEFINITIONS(-DB_ENDIAN)
ELSE()
    ADD_DEFINITIONS(-DL_ENDIAN)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wno-unused-parameter HAVE_WNO_UNUSED_PARAMETER)
IF(HAVE_WNO_UNUSED_PARAMETER)
    ADD_DEFINITIONS(-Wno-unused-parameter)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wno-unused-variable HAVE_WNO_UNUSED_VARIABLE)
IF(HAVE_WNO_UNUSED_VARIABLE)
    ADD_DEFINITIONS(-Wno-unused-variable)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wno-missing-field-initializers HAVE_WNO_MISSING_FIELD_INITIALIZERS)
IF(HAVE_WNO_MISSING_FIELD_INITIALIZERS)
    ADD_DEFINITIONS(-Wno-missing-field-initializers)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wno-old-style-declaration HAVE_WNO_OLD_STYLE_DECLARATION)
IF(HAVE_WNO_OLD_STYLE_DECLARATION)
    ADD_DEFINITIONS(-Wno-old-style-declaration)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wimplicit-fallthrough=0 HAVE_IMPLICIT_FALLTHROUGH)
IF(HAVE_IMPLICIT_FALLTHROUGH)
    ADD_DEFINITIONS(-Wimplicit-fallthrough=0)
ENDIF()

CHECK_C_COMPILER_FLAG(-Wno-cast-function-type HAVE_WNO_CAST_FUNCTION_TYPE)
IF(HAVE_WNO_CAST_FUNCTION_TYPE)
    ADD_DEFINITIONS(-Wno-cast-function-type)
ENDIF()

IF(CYREN_OS_IS_FREEBSD)
    IF(CMAKE_BUILD_TYPE STREQUAL "Debug" OR MEMCHECK)
        ADD_DEFINITIONS(-DPURIFY)
    ENDIF()
ENDIF()

ADD_DEFINITIONS(-D_REENTRANT)

IF(CYREN_OS_IS_WINDOWS)
    ADD_DEFINITIONS(
        -D_MT
        -DDSO_WIN32
        -DWIN32_LEAN_AND_MEAN
        -D_CRT_SECURE_NO_DEPRECATE)

    # Disable linker warning about inaccessible archive members.
    FOREACH(VAR CMAKE_EXE_LINKER_FLAGS
                CMAKE_STATIC_LINKER_FLAGS
                CMAKE_SHARED_LINKER_FLAGS
                CMAKE_MODULE_LINKER_FLAGS)
        SET(${VAR} "${${VAR}} /ignore:4221")
    ENDFOREACH()
ENDIF()

IF(CYREN_C_COMPILER_IS_CLANG OR CYREN_C_COMPILER_IS_GCC)
  STRING(REPLACE "-fvisibility=hidden"         "" CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}")
  STRING(REPLACE "-fvisibility=hidden"         "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  STRING(REPLACE "-fvisibility-inlines-hidden" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ENDIF()

CONFIGURE_FILE(.NoDartCoverage .NoDartCoverage COPYONLY)

OPENSSL_DEFINE_OPTION(JPAKE DESCRIPTION "J-PAKE")
OPENSSL_DEFINE_OPTION(MD2)
OPENSSL_DEFINE_OPTION(RC5)
OPENSSL_DEFINE_OPTION(STORE DESCRIPTION "STORE data structure")

# Generate the <opensslconf.h> header.  This simulates the operation
# of Configure on crypto/opensslconf.h.in. Note that these lines and
# the file opensslconf.h.cmake must be adapted manually on upgrades!

IF(CYREN_ARCH_IS_I386)
    SET(THIRTY_TWO_BIT TRUE)

    IF(CYREN_OS_IS_WINDOWS)
        SET(OPENSSL_SYSNAME_WIN32 TRUE)
    ELSE()
        SET(DES_PTR TRUE)
        SET(DES_RISC1 TRUE)
    ENDIF()

    SET(BN_LLONG TRUE)
    SET(RC4_INDEX TRUE)
    SET(DES_LONG "unsigned long")

ELSEIF(CYREN_ARCH_IS_AMD64)
    IF(CYREN_OS_IS_WINDOWS)
        SET(SIXTY_FOUR_BIT TRUE)
        SET(OPENSSL_SYSNAME_WIN32 TRUE)
        SET(OPENSSL_SYSNAME_WIN64A TRUE)
        SET(RC4_CHUNK "unsigned long long")
    ELSE()
        SET(SIXTY_FOUR_BIT_LONG TRUE)
        SET(RC4_CHUNK "unsigned long")
    ENDIF()

    SET(DES_LONG "unsigned int")

ELSEIF(CYREN_ARCH_IS_PPC)
    SET(THIRTY_TWO_BIT TRUE)
    SET(DES_LONG "unsigned long")

ELSEIF(CYREN_ARCH_IS_PPC64)
    SET(SIXTY_FOUR_BIT_LONG TRUE)
    SET(DES_LONG "unsigned long")

ELSE()
    MESSAGE(FATAL_ERROR "unknown architecture")
ENDIF()

SET(OPENSSL_NO_STATIC_ENGINE TRUE)
SET(OPENSSL_CPUID_OBJ TRUE)

IF(CYREN_OS_IS_WINDOWS)
    SET(OPENSSL_EXPORT_VAR_AS_FUNCTION TRUE)
ELSE()
    SET(DES_UNROLL TRUE)
ENDIF()

SET(ENGINESDIR "${CMAKE_INSTALL_PREFIX}/lib/engines")
SET(OPENSSLDIR "${CMAKE_INSTALL_PREFIX}/ssl")

CYREN_CONFIGURE_HEADERS(opensslconf.h.cmake PREFIX openssl)
CYREN_INSTALL_HEADERS(e_os2.h PREFIX openssl)
CYREN_INSTALL_HEADERS(e_os.h INTERNAL)
CYREN_INCLUDE_DIRECTORY()
CYREN_INCLUDE_DIRECTORY(INTERNAL)

ADD_SUBDIRECTORY(engines)
ADD_SUBDIRECTORY(crypto)
ADD_SUBDIRECTORY(ssl)
ADD_SUBDIRECTORY(apps)
ADD_SUBDIRECTORY(test)
